// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "go-todos-api/models"

	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: categoryInput
func (_m *TodoRepository) Create(categoryInput models.TodoInput) (models.Todo, error) {
	ret := _m.Called(categoryInput)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(models.TodoInput) (models.Todo, error)); ok {
		return rf(categoryInput)
	}
	if rf, ok := ret.Get(0).(func(models.TodoInput) models.Todo); ok {
		r0 = rf(categoryInput)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(models.TodoInput) error); ok {
		r1 = rf(categoryInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TodoRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *TodoRepository) GetAll() ([]models.Todo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Todo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TodoRepository) GetByID(id string) (models.Todo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Todo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Todo); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: categoryInput, id
func (_m *TodoRepository) Update(categoryInput models.TodoInput, id string) (models.Todo, error) {
	ret := _m.Called(categoryInput, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(models.TodoInput, string) (models.Todo, error)); ok {
		return rf(categoryInput, id)
	}
	if rf, ok := ret.Get(0).(func(models.TodoInput, string) models.Todo); ok {
		r0 = rf(categoryInput, id)
	} else {
		r0 = ret.Get(0).(models.Todo)
	}

	if rf, ok := ret.Get(1).(func(models.TodoInput, string) error); ok {
		r1 = rf(categoryInput, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
